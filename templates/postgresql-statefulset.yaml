{{- if .Values.postgresql.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "matrix-synapse.fullname" . }}-postgresql
  labels:
    {{- include "matrix-synapse.postgresql.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "matrix-synapse.fullname" . }}-postgresql
  replicas: {{ .Values.postgresql.replicaCount }}
  selector:
    matchLabels:
      {{- include "matrix-synapse.postgresql.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "matrix-synapse.postgresql.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/postgresql-configmap.yaml") . | sha256sum }}
    spec:
      securityContext:
        fsGroup: 999
        runAsNonRoot: true
        runAsUser: 999
      serviceAccountName: {{ include "matrix-synapse.fullname" . }}-postgresql
      containers:
        - name: postgresql
          {{- if .Values.postgresql.containerSecurityContext }}
          securityContext:
            {{- toYaml .Values.postgresql.containerSecurityContext | nindent 12 }}
          {{- end }}
          image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
          imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_DB
              value: {{ .Values.postgresql.database | quote }}
            - name: POSTGRES_USER
              value: {{ .Values.postgresql.username | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-synapse.fullname" . }}-postgresql
                  key: postgres-password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_INITDB_ARGS
              value: {{ .Values.postgresql.initdbArgs | quote }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U {{ .Values.postgresql.username }} -d {{ .Values.postgresql.database }}
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U {{ .Values.postgresql.username }} -d {{ .Values.postgresql.database }}
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
          resources:
            {{- toYaml .Values.postgresql.resources | nindent 12 }}
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
            - name: postgresql-config
              mountPath: /etc/postgresql
              readOnly: true
            - name: postgresql-init
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
      volumes:
        - name: postgresql-config
          configMap:
            name: {{ include "matrix-synapse.fullname" . }}-postgresql-config
        - name: postgresql-init
          configMap:
            name: {{ include "matrix-synapse.fullname" . }}-postgresql-init
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: postgresql-data
        labels:
          {{- include "matrix-synapse.postgresql.labels" . | nindent 10 }}
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: {{ .Values.postgresql.persistence.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.postgresql.persistence.size }}
{{- end }}
