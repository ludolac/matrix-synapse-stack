name: Trivy Security Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  trivy-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (table format)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

  trivy-helm-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Template Helm chart
        run: |
          helm template matrix-synapse . \
            --set postgresql.auth.password=test-password \
            --set synapse.server.registrationSharedSecret=test-secret \
            > rendered-manifests.yaml

      - name: Run Trivy scanner on rendered manifests
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'rendered-manifests.yaml'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

  trivy-image-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        image:
          - name: synapse
            repo: ghcr.io/element-hq/synapse
            tag: v1.140.0
          - name: element-web
            repo: ghcr.io/element-hq/element-web
            tag: v1.12.2
          - name: postgresql
            repo: postgres
            tag: 16-alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner on ${{ matrix.image.name }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.image.repo }}:${{ matrix.image.tag }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.image.name }}-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.image.name }}-results.sarif'
          category: 'trivy-${{ matrix.image.name }}'

      - name: Run Trivy vulnerability scanner (table format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.image.repo }}:${{ matrix.image.tag }}'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Run Trivy vulnerability scanner (JSON format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.image.repo }}:${{ matrix.image.tag }}'
          format: 'json'
          output: 'trivy-${{ matrix.image.name }}.json'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: Upload image scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-${{ matrix.image.name }}-json
          path: 'trivy-${{ matrix.image.name }}.json'

  security-summary:
    runs-on: ubuntu-latest
    needs: [trivy-scan, trivy-helm-scan, trivy-image-scan]
    if: always()
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy to generate JSON report (config)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-config-report.json'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: Download image scan results
        uses: actions/download-artifact@v4
        with:
          path: image-scans

      - name: Generate security badge
        id: badge
        run: |
          # Count config vulnerabilities
          CONFIG_CRITICAL=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity=="CRITICAL")] | length' trivy-config-report.json 2>/dev/null || echo 0)
          CONFIG_HIGH=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity=="HIGH")] | length' trivy-config-report.json 2>/dev/null || echo 0)
          CONFIG_MEDIUM=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity=="MEDIUM")] | length' trivy-config-report.json 2>/dev/null || echo 0)
          CONFIG_LOW=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity=="LOW")] | length' trivy-config-report.json 2>/dev/null || echo 0)

          # Count image vulnerabilities from all image scans
          IMAGE_CRITICAL=0
          IMAGE_HIGH=0
          IMAGE_MEDIUM=0
          IMAGE_LOW=0

          for file in image-scans/trivy-*-json/*.json; do
            if [ -f "$file" ]; then
              CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' "$file" 2>/dev/null || echo 0)
              HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' "$file" 2>/dev/null || echo 0)
              MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' "$file" 2>/dev/null || echo 0)
              LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' "$file" 2>/dev/null || echo 0)

              IMAGE_CRITICAL=$((IMAGE_CRITICAL + CRITICAL))
              IMAGE_HIGH=$((IMAGE_HIGH + HIGH))
              IMAGE_MEDIUM=$((IMAGE_MEDIUM + MEDIUM))
              IMAGE_LOW=$((IMAGE_LOW + LOW))
            fi
          done

          # Total counts
          TOTAL_CRITICAL=$((CONFIG_CRITICAL + IMAGE_CRITICAL))
          TOTAL_HIGH=$((CONFIG_HIGH + IMAGE_HIGH))
          TOTAL_MEDIUM=$((CONFIG_MEDIUM + IMAGE_MEDIUM))
          TOTAL_LOW=$((CONFIG_LOW + IMAGE_LOW))

          echo "config_critical=$CONFIG_CRITICAL" >> $GITHUB_OUTPUT
          echo "config_high=$CONFIG_HIGH" >> $GITHUB_OUTPUT
          echo "config_medium=$CONFIG_MEDIUM" >> $GITHUB_OUTPUT
          echo "config_low=$CONFIG_LOW" >> $GITHUB_OUTPUT

          echo "image_critical=$IMAGE_CRITICAL" >> $GITHUB_OUTPUT
          echo "image_high=$IMAGE_HIGH" >> $GITHUB_OUTPUT
          echo "image_medium=$IMAGE_MEDIUM" >> $GITHUB_OUTPUT
          echo "image_low=$IMAGE_LOW" >> $GITHUB_OUTPUT

          echo "total_critical=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
          echo "total_high=$TOTAL_HIGH" >> $GITHUB_OUTPUT
          echo "total_medium=$TOTAL_MEDIUM" >> $GITHUB_OUTPUT
          echo "total_low=$TOTAL_LOW" >> $GITHUB_OUTPUT

          # Determine badge color based on total counts
          if [ "$TOTAL_CRITICAL" -gt 0 ]; then
            COLOR="critical"
            STATUS="Critical: $TOTAL_CRITICAL"
          elif [ "$TOTAL_HIGH" -gt 0 ]; then
            COLOR="red"
            STATUS="High: $TOTAL_HIGH"
          elif [ "$TOTAL_MEDIUM" -gt 0 ]; then
            COLOR="orange"
            STATUS="Medium: $TOTAL_MEDIUM"
          else
            COLOR="success"
            STATUS="Passing"
          fi

          echo "color=$COLOR" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT

      - name: Generate per-image security details
        id: image-details
        run: |
          # Initialize markdown table for image details
          IMAGE_TABLE="| Image | Critical | High | Medium | Low |\n"
          IMAGE_TABLE="${IMAGE_TABLE}|-------|----------|------|--------|-----|\n"

          # Process synapse image
          if [ -f "image-scans/trivy-synapse-json/trivy-synapse.json" ]; then
            CRIT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' image-scans/trivy-synapse-json/trivy-synapse.json 2>/dev/null || echo 0)
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' image-scans/trivy-synapse-json/trivy-synapse.json 2>/dev/null || echo 0)
            MED=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' image-scans/trivy-synapse-json/trivy-synapse.json 2>/dev/null || echo 0)
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' image-scans/trivy-synapse-json/trivy-synapse.json 2>/dev/null || echo 0)
            IMAGE_TABLE="${IMAGE_TABLE}| **Synapse (v1.140.0)** | $CRIT | $HIGH | $MED | $LOW |\n"
          fi

          # Process element-web image
          if [ -f "image-scans/trivy-element-web-json/trivy-element-web.json" ]; then
            CRIT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' image-scans/trivy-element-web-json/trivy-element-web.json 2>/dev/null || echo 0)
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' image-scans/trivy-element-web-json/trivy-element-web.json 2>/dev/null || echo 0)
            MED=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' image-scans/trivy-element-web-json/trivy-element-web.json 2>/dev/null || echo 0)
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' image-scans/trivy-element-web-json/trivy-element-web.json 2>/dev/null || echo 0)
            IMAGE_TABLE="${IMAGE_TABLE}| **Element Web (v1.12.2)** | $CRIT | $HIGH | $MED | $LOW |\n"
          fi

          # Process postgresql image
          if [ -f "image-scans/trivy-postgresql-json/trivy-postgresql.json" ]; then
            CRIT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' image-scans/trivy-postgresql-json/trivy-postgresql.json 2>/dev/null || echo 0)
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' image-scans/trivy-postgresql-json/trivy-postgresql.json 2>/dev/null || echo 0)
            MED=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' image-scans/trivy-postgresql-json/trivy-postgresql.json 2>/dev/null || echo 0)
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' image-scans/trivy-postgresql-json/trivy-postgresql.json 2>/dev/null || echo 0)
            IMAGE_TABLE="${IMAGE_TABLE}| **PostgreSQL (16-alpine)** | $CRIT | $HIGH | $MED | $LOW |\n"
          fi

          echo "image_table<<EOF" >> $GITHUB_OUTPUT
          echo -e "$IMAGE_TABLE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create security summary
        run: |
          cat > security-summary.md <<EOF
          # Security Scan Summary

          **Last Scan:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ## Overall Vulnerability Count

          | Severity | Configuration | Container Images | **Total** |
          |----------|---------------|------------------|-----------|
          | 🔴 **Critical** | ${{ steps.badge.outputs.config_critical }} | ${{ steps.badge.outputs.image_critical }} | **${{ steps.badge.outputs.total_critical }}** |
          | 🟠 **High** | ${{ steps.badge.outputs.config_high }} | ${{ steps.badge.outputs.image_high }} | **${{ steps.badge.outputs.total_high }}** |
          | 🟡 **Medium** | ${{ steps.badge.outputs.config_medium }} | ${{ steps.badge.outputs.image_medium }} | **${{ steps.badge.outputs.total_medium }}** |
          | 🔵 **Low** | ${{ steps.badge.outputs.config_low }} | ${{ steps.badge.outputs.image_low }} | **${{ steps.badge.outputs.total_low }}** |

          ## Container Image Vulnerabilities

          ${{ steps.image-details.outputs.image_table }}

          ## Status
          ${{ steps.badge.outputs.status }}

          ---

          **Configuration Scan:** Helm chart configurations and Kubernetes manifests
          **Image Scan:** Container images used in the deployment

          View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning).
          EOF

          cat security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
