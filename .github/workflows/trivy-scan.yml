name: Trivy Security Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  trivy-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (table format)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

  trivy-helm-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Template Helm chart
        run: |
          helm template matrix-synapse . \
            --set postgresql.auth.password=test-password \
            --set synapse.server.registrationSharedSecret=test-secret \
            > rendered-manifests.yaml

      - name: Run Trivy scanner on rendered manifests
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'rendered-manifests.yaml'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

  trivy-image-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        image:
          - name: synapse
            repo: ghcr.io/element-hq/synapse
            tag_key: synapse.image.tag
          - name: element-web
            repo: ghcr.io/element-hq/element-web
            tag_key: element.image.tag
          - name: postgresql
            repo: postgres
            tag_key: postgresql.image.tag
          - name: coturn
            repo: coturn/coturn
            tag_key: coturn.image.tag
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract image tag from values.yaml
        id: get-tag
        run: |
          # Install yq if not available
          if ! command -v yq &> /dev/null; then
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi

          # Extract tag from values.yaml using the tag_key
          TAG=$(yq eval '.${{ matrix.image.tag_key }}' values.yaml | tr -d '"')
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Image ${{ matrix.image.name }} version: $TAG"

      - name: Run Trivy vulnerability scanner on ${{ matrix.image.name }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.image.repo }}:${{ steps.get-tag.outputs.tag }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.image.name }}-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.image.name }}-results.sarif'
          category: 'trivy-${{ matrix.image.name }}'

      - name: Run Trivy vulnerability scanner (table format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.image.repo }}:${{ steps.get-tag.outputs.tag }}'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Run Trivy vulnerability scanner (JSON format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.image.repo }}:${{ steps.get-tag.outputs.tag }}'
          format: 'json'
          output: 'trivy-${{ matrix.image.name }}.json'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: Generate CSV report for ${{ matrix.image.name }}
        run: |
          # Convert JSON to CSV with detailed vulnerability information
          jq -r '
            ["CVE ID", "Severity", "Package", "Installed Version", "Fixed Version", "Title", "Description"] as $headers |
            $headers,
            (
              .Results[]?.Vulnerabilities[]? |
              [
                .VulnerabilityID // "N/A",
                .Severity // "UNKNOWN",
                .PkgName // "N/A",
                .InstalledVersion // "N/A",
                .FixedVersion // "Not Fixed",
                .Title // "No title",
                (.Description // "No description" | gsub("\n"; " ") | .[0:200])
              ]
            ) |
            @csv
          ' trivy-${{ matrix.image.name }}.json > trivy-${{ matrix.image.name }}.csv || echo "No vulnerabilities found" > trivy-${{ matrix.image.name }}.csv

      - name: Upload image scan results (JSON + CSV)
        uses: actions/upload-artifact@v4
        with:
          name: trivy-${{ matrix.image.name }}-reports
          path: |
            trivy-${{ matrix.image.name }}.json
            trivy-${{ matrix.image.name }}.csv

  security-summary:
    runs-on: ubuntu-latest
    needs: [trivy-scan, trivy-helm-scan, trivy-image-scan]
    if: always()
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy to generate JSON report (config)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-config-report.json'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: Download image scan results
        uses: actions/download-artifact@v4
        with:
          path: image-scans
          pattern: trivy-*-reports

      - name: Generate security badge
        id: badge
        run: |
          # Count config vulnerabilities
          CONFIG_CRITICAL=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity=="CRITICAL")] | length' trivy-config-report.json 2>/dev/null || echo 0)
          CONFIG_HIGH=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity=="HIGH")] | length' trivy-config-report.json 2>/dev/null || echo 0)
          CONFIG_MEDIUM=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity=="MEDIUM")] | length' trivy-config-report.json 2>/dev/null || echo 0)
          CONFIG_LOW=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity=="LOW")] | length' trivy-config-report.json 2>/dev/null || echo 0)

          # Count image vulnerabilities from all image scans
          IMAGE_CRITICAL=0
          IMAGE_HIGH=0
          IMAGE_MEDIUM=0
          IMAGE_LOW=0

          for file in image-scans/trivy-*-reports/*.json; do
            if [ -f "$file" ]; then
              CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' "$file" 2>/dev/null || echo 0)
              HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' "$file" 2>/dev/null || echo 0)
              MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' "$file" 2>/dev/null || echo 0)
              LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' "$file" 2>/dev/null || echo 0)

              IMAGE_CRITICAL=$((IMAGE_CRITICAL + CRITICAL))
              IMAGE_HIGH=$((IMAGE_HIGH + HIGH))
              IMAGE_MEDIUM=$((IMAGE_MEDIUM + MEDIUM))
              IMAGE_LOW=$((IMAGE_LOW + LOW))
            fi
          done

          # Total counts
          TOTAL_CRITICAL=$((CONFIG_CRITICAL + IMAGE_CRITICAL))
          TOTAL_HIGH=$((CONFIG_HIGH + IMAGE_HIGH))
          TOTAL_MEDIUM=$((CONFIG_MEDIUM + IMAGE_MEDIUM))
          TOTAL_LOW=$((CONFIG_LOW + IMAGE_LOW))

          echo "config_critical=$CONFIG_CRITICAL" >> $GITHUB_OUTPUT
          echo "config_high=$CONFIG_HIGH" >> $GITHUB_OUTPUT
          echo "config_medium=$CONFIG_MEDIUM" >> $GITHUB_OUTPUT
          echo "config_low=$CONFIG_LOW" >> $GITHUB_OUTPUT

          echo "image_critical=$IMAGE_CRITICAL" >> $GITHUB_OUTPUT
          echo "image_high=$IMAGE_HIGH" >> $GITHUB_OUTPUT
          echo "image_medium=$IMAGE_MEDIUM" >> $GITHUB_OUTPUT
          echo "image_low=$IMAGE_LOW" >> $GITHUB_OUTPUT

          echo "total_critical=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
          echo "total_high=$TOTAL_HIGH" >> $GITHUB_OUTPUT
          echo "total_medium=$TOTAL_MEDIUM" >> $GITHUB_OUTPUT
          echo "total_low=$TOTAL_LOW" >> $GITHUB_OUTPUT

          # Determine badge color based on total counts
          if [ "$TOTAL_CRITICAL" -gt 0 ]; then
            COLOR="critical"
            STATUS="Critical: $TOTAL_CRITICAL"
          elif [ "$TOTAL_HIGH" -gt 0 ]; then
            COLOR="red"
            STATUS="High: $TOTAL_HIGH"
          elif [ "$TOTAL_MEDIUM" -gt 0 ]; then
            COLOR="orange"
            STATUS="Medium: $TOTAL_MEDIUM"
          else
            COLOR="success"
            STATUS="Passing"
          fi

          echo "color=$COLOR" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT

      - name: Generate per-image security details
        id: image-details
        run: |
          # Install yq if not available
          if ! command -v yq &> /dev/null; then
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi

          # Extract versions from values.yaml
          SYNAPSE_VERSION=$(yq eval '.synapse.image.tag' values.yaml | tr -d '"')
          ELEMENT_VERSION=$(yq eval '.element.image.tag' values.yaml | tr -d '"')
          POSTGRES_VERSION=$(yq eval '.postgresql.image.tag' values.yaml | tr -d '"')
          COTURN_VERSION=$(yq eval '.coturn.image.tag' values.yaml | tr -d '"')

          echo "Extracted versions:"
          echo "Synapse: $SYNAPSE_VERSION"
          echo "Element: $ELEMENT_VERSION"
          echo "PostgreSQL: $POSTGRES_VERSION"
          echo "Coturn: $COTURN_VERSION"

          # Export versions for later use
          echo "synapse_version=$SYNAPSE_VERSION" >> $GITHUB_OUTPUT
          echo "element_version=$ELEMENT_VERSION" >> $GITHUB_OUTPUT
          echo "postgres_version=$POSTGRES_VERSION" >> $GITHUB_OUTPUT
          echo "coturn_version=$COTURN_VERSION" >> $GITHUB_OUTPUT

          # Initialize markdown table for image details
          IMAGE_TABLE="| Image | Version | Critical | High | Medium | Low |\n"
          IMAGE_TABLE="${IMAGE_TABLE}|-------|---------|----------|------|--------|-----|\n"

          # Get workflow run ID for artifact links
          RUN_ID="${{ github.run_id }}"
          REPO="${{ github.repository }}"

          # Process synapse image
          if [ -f "image-scans/trivy-synapse-reports/trivy-synapse.json" ]; then
            CRIT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' image-scans/trivy-synapse-reports/trivy-synapse.json 2>/dev/null || echo 0)
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' image-scans/trivy-synapse-reports/trivy-synapse.json 2>/dev/null || echo 0)
            MED=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' image-scans/trivy-synapse-reports/trivy-synapse.json 2>/dev/null || echo 0)
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' image-scans/trivy-synapse-reports/trivy-synapse.json 2>/dev/null || echo 0)

            CRIT_BADGE="[![Critical](https://img.shields.io/badge/critical-${CRIT}-$([ ${CRIT} -eq 0 ] && echo 'success' || echo 'critical'))](https://github.com/${REPO}/actions/runs/${RUN_ID})"
            HIGH_BADGE="[![High](https://img.shields.io/badge/high-${HIGH}-$([ ${HIGH} -eq 0 ] && echo 'success' || echo 'important'))](https://github.com/${REPO}/actions/runs/${RUN_ID})"
            MED_BADGE="[![Medium](https://img.shields.io/badge/medium-${MED}-$([ ${MED} -eq 0 ] && echo 'success' || echo 'orange'))](https://github.com/${REPO}/actions/runs/${RUN_ID})"
            LOW_BADGE="[![Low](https://img.shields.io/badge/low-${LOW}-informational)](https://github.com/${REPO}/actions/runs/${RUN_ID})"

            IMAGE_TABLE="${IMAGE_TABLE}| **Synapse** | ${SYNAPSE_VERSION} | ${CRIT_BADGE} | ${HIGH_BADGE} | ${MED_BADGE} | ${LOW_BADGE} |\n"
          fi

          # Process element-web image
          if [ -f "image-scans/trivy-element-web-reports/trivy-element-web.json" ]; then
            CRIT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' image-scans/trivy-element-web-reports/trivy-element-web.json 2>/dev/null || echo 0)
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' image-scans/trivy-element-web-reports/trivy-element-web.json 2>/dev/null || echo 0)
            MED=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' image-scans/trivy-element-web-reports/trivy-element-web.json 2>/dev/null || echo 0)
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' image-scans/trivy-element-web-reports/trivy-element-web.json 2>/dev/null || echo 0)

            CRIT_BADGE="[![Critical](https://img.shields.io/badge/critical-${CRIT}-$([ ${CRIT} -eq 0 ] && echo 'success' || echo 'critical'))](https://github.com/${REPO}/actions/runs/${RUN_ID})"
            HIGH_BADGE="[![High](https://img.shields.io/badge/high-${HIGH}-$([ ${HIGH} -eq 0 ] && echo 'success' || echo 'important'))](https://github.com/${REPO}/actions/runs/${RUN_ID})"
            MED_BADGE="[![Medium](https://img.shields.io/badge/medium-${MED}-$([ ${MED} -eq 0 ] && echo 'success' || echo 'orange'))](https://github.com/${REPO}/actions/runs/${RUN_ID})"
            LOW_BADGE="[![Low](https://img.shields.io/badge/low-${LOW}-informational)](https://github.com/${REPO}/actions/runs/${RUN_ID})"

            IMAGE_TABLE="${IMAGE_TABLE}| **Element Web** | ${ELEMENT_VERSION} | ${CRIT_BADGE} | ${HIGH_BADGE} | ${MED_BADGE} | ${LOW_BADGE} |\n"
          fi

          # Process postgresql image
          if [ -f "image-scans/trivy-postgresql-reports/trivy-postgresql.json" ]; then
            CRIT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' image-scans/trivy-postgresql-reports/trivy-postgresql.json 2>/dev/null || echo 0)
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' image-scans/trivy-postgresql-reports/trivy-postgresql.json 2>/dev/null || echo 0)
            MED=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' image-scans/trivy-postgresql-reports/trivy-postgresql.json 2>/dev/null || echo 0)
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' image-scans/trivy-postgresql-reports/trivy-postgresql.json 2>/dev/null || echo 0)

            CRIT_BADGE="[![Critical](https://img.shields.io/badge/critical-${CRIT}-$([ ${CRIT} -eq 0 ] && echo 'success' || echo 'critical'))](https://github.com/${REPO}/actions/runs/${RUN_ID})"
            HIGH_BADGE="[![High](https://img.shields.io/badge/high-${HIGH}-$([ ${HIGH} -eq 0 ] && echo 'success' || echo 'important'))](https://github.com/${REPO}/actions/runs/${RUN_ID})"
            MED_BADGE="[![Medium](https://img.shields.io/badge/medium-${MED}-$([ ${MED} -eq 0 ] && echo 'success' || echo 'orange'))](https://github.com/${REPO}/actions/runs/${RUN_ID})"
            LOW_BADGE="[![Low](https://img.shields.io/badge/low-${LOW}-informational)](https://github.com/${REPO}/actions/runs/${RUN_ID})"

            IMAGE_TABLE="${IMAGE_TABLE}| **PostgreSQL** | ${POSTGRES_VERSION} | ${CRIT_BADGE} | ${HIGH_BADGE} | ${MED_BADGE} | ${LOW_BADGE} |\n"
          fi

          # Process coturn image
          if [ -f "image-scans/trivy-coturn-reports/trivy-coturn.json" ]; then
            CRIT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' image-scans/trivy-coturn-reports/trivy-coturn.json 2>/dev/null || echo 0)
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' image-scans/trivy-coturn-reports/trivy-coturn.json 2>/dev/null || echo 0)
            MED=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' image-scans/trivy-coturn-reports/trivy-coturn.json 2>/dev/null || echo 0)
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' image-scans/trivy-coturn-reports/trivy-coturn.json 2>/dev/null || echo 0)

            CRIT_BADGE="[![Critical](https://img.shields.io/badge/critical-${CRIT}-$([ ${CRIT} -eq 0 ] && echo 'success' || echo 'critical'))](https://github.com/${REPO}/actions/runs/${RUN_ID})"
            HIGH_BADGE="[![High](https://img.shields.io/badge/high-${HIGH}-$([ ${HIGH} -eq 0 ] && echo 'success' || echo 'important'))](https://github.com/${REPO}/actions/runs/${RUN_ID})"
            MED_BADGE="[![Medium](https://img.shields.io/badge/medium-${MED}-$([ ${MED} -eq 0 ] && echo 'success' || echo 'orange'))](https://github.com/${REPO}/actions/runs/${RUN_ID})"
            LOW_BADGE="[![Low](https://img.shields.io/badge/low-${LOW}-informational)](https://github.com/${REPO}/actions/runs/${RUN_ID})"

            IMAGE_TABLE="${IMAGE_TABLE}| **Coturn** | ${COTURN_VERSION} | ${CRIT_BADGE} | ${HIGH_BADGE} | ${MED_BADGE} | ${LOW_BADGE} |\n"
          fi

          echo "image_table<<EOF" >> $GITHUB_OUTPUT
          echo -e "$IMAGE_TABLE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create security summary
        run: |
          cat > security-summary.md <<EOF
          # Security Scan Summary

          **Last Scan:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ## Overall Vulnerability Count

          | Severity | Configuration | Container Images | **Total** |
          |----------|---------------|------------------|-----------|
          | 🔴 **Critical** | ${{ steps.badge.outputs.config_critical }} | ${{ steps.badge.outputs.image_critical }} | **${{ steps.badge.outputs.total_critical }}** |
          | 🟠 **High** | ${{ steps.badge.outputs.config_high }} | ${{ steps.badge.outputs.image_high }} | **${{ steps.badge.outputs.total_high }}** |
          | 🟡 **Medium** | ${{ steps.badge.outputs.config_medium }} | ${{ steps.badge.outputs.image_medium }} | **${{ steps.badge.outputs.total_medium }}** |
          | 🔵 **Low** | ${{ steps.badge.outputs.config_low }} | ${{ steps.badge.outputs.image_low }} | **${{ steps.badge.outputs.total_low }}** |

          ## Container Image Vulnerabilities

          ${{ steps.image-details.outputs.image_table }}

          ## Status
          ${{ steps.badge.outputs.status }}

          ---

          **Configuration Scan:** Helm chart configurations and Kubernetes manifests
          **Image Scan:** Container images used in the deployment

          View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning).
          EOF

          cat security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Update README with scan results
        if: github.ref == 'refs/heads/main'
        run: |
          # Read current README
          cp README.md README.md.backup

          # Create badge URLs with real counts
          CONFIG_CRIT_BADGE="![Critical](https://img.shields.io/badge/critical-${{ steps.badge.outputs.config_critical }}-$([ ${{ steps.badge.outputs.config_critical }} -eq 0 ] && echo 'success' || echo 'critical'))"
          CONFIG_HIGH_BADGE="![High](https://img.shields.io/badge/high-${{ steps.badge.outputs.config_high }}-$([ ${{ steps.badge.outputs.config_high }} -eq 0 ] && echo 'success' || echo 'important'))"
          CONFIG_MED_BADGE="![Medium](https://img.shields.io/badge/medium-${{ steps.badge.outputs.config_medium }}-$([ ${{ steps.badge.outputs.config_medium }} -eq 0 ] && echo 'success' || echo 'orange'))"
          CONFIG_LOW_BADGE="![Low](https://img.shields.io/badge/low-${{ steps.badge.outputs.config_low }}-informational)"

          IMAGE_CRIT_BADGE="![Critical](https://img.shields.io/badge/critical-${{ steps.badge.outputs.image_critical }}-$([ ${{ steps.badge.outputs.image_critical }} -eq 0 ] && echo 'success' || echo 'critical'))"
          IMAGE_HIGH_BADGE="![High](https://img.shields.io/badge/high-${{ steps.badge.outputs.image_high }}-$([ ${{ steps.badge.outputs.image_high }} -eq 0 ] && echo 'success' || echo 'important'))"
          IMAGE_MED_BADGE="![Medium](https://img.shields.io/badge/medium-${{ steps.badge.outputs.image_medium }}-$([ ${{ steps.badge.outputs.image_medium }} -eq 0 ] && echo 'success' || echo 'orange'))"
          IMAGE_LOW_BADGE="![Low](https://img.shields.io/badge/low-${{ steps.badge.outputs.image_low }}-informational)"

          # Get workflow run ID and repository for links
          RUN_ID="${{ github.run_id }}"
          REPO="${{ github.repository }}"

          # Extract versions from values.yaml (same as in image-details step)
          if ! command -v yq &> /dev/null; then
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi

          SYNAPSE_VERSION=$(yq eval '.synapse.image.tag' values.yaml | tr -d '"')
          ELEMENT_VERSION=$(yq eval '.element.image.tag' values.yaml | tr -d '"')
          POSTGRES_VERSION=$(yq eval '.postgresql.image.tag' values.yaml | tr -d '"')
          COTURN_VERSION=$(yq eval '.coturn.image.tag' values.yaml | tr -d '"')

          # Extract per-image counts
          SYNAPSE_CRIT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' image-scans/trivy-synapse-reports/trivy-synapse.json 2>/dev/null || echo 0)
          SYNAPSE_HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' image-scans/trivy-synapse-reports/trivy-synapse.json 2>/dev/null || echo 0)
          SYNAPSE_MED=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' image-scans/trivy-synapse-reports/trivy-synapse.json 2>/dev/null || echo 0)
          SYNAPSE_LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' image-scans/trivy-synapse-reports/trivy-synapse.json 2>/dev/null || echo 0)

          ELEMENT_CRIT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' image-scans/trivy-element-web-reports/trivy-element-web.json 2>/dev/null || echo 0)
          ELEMENT_HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' image-scans/trivy-element-web-reports/trivy-element-web.json 2>/dev/null || echo 0)
          ELEMENT_MED=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' image-scans/trivy-element-web-reports/trivy-element-web.json 2>/dev/null || echo 0)
          ELEMENT_LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' image-scans/trivy-element-web-reports/trivy-element-web.json 2>/dev/null || echo 0)

          POSTGRES_CRIT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' image-scans/trivy-postgresql-reports/trivy-postgresql.json 2>/dev/null || echo 0)
          POSTGRES_HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' image-scans/trivy-postgresql-reports/trivy-postgresql.json 2>/dev/null || echo 0)
          POSTGRES_MED=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' image-scans/trivy-postgresql-reports/trivy-postgresql.json 2>/dev/null || echo 0)
          POSTGRES_LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' image-scans/trivy-postgresql-reports/trivy-postgresql.json 2>/dev/null || echo 0)

          COTURN_CRIT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' image-scans/trivy-coturn-reports/trivy-coturn.json 2>/dev/null || echo 0)
          COTURN_HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' image-scans/trivy-coturn-reports/trivy-coturn.json 2>/dev/null || echo 0)
          COTURN_MED=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' image-scans/trivy-coturn-reports/trivy-coturn.json 2>/dev/null || echo 0)
          COTURN_LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' image-scans/trivy-coturn-reports/trivy-coturn.json 2>/dev/null || echo 0)

          # Update README with sed (replace the Overall Security Status table)
          sed -i "/^| \*\*Configuration\*\* |/c\| **Configuration** | ![Status](https://img.shields.io/badge/status-scanned-success) | Daily at 2AM UTC | $CONFIG_CRIT_BADGE | $CONFIG_HIGH_BADGE | $CONFIG_MED_BADGE | $CONFIG_LOW_BADGE |" README.md
          sed -i "/^| \*\*Helm Manifests\*\* |/c\| **Helm Manifests** | ![Status](https://img.shields.io/badge/status-scanned-success) | On every push | $CONFIG_CRIT_BADGE | $CONFIG_HIGH_BADGE | $CONFIG_MED_BADGE | $CONFIG_LOW_BADGE |" README.md
          sed -i "/^| \*\*Container Images\*\* |/c\| **Container Images** | ![Status](https://img.shields.io/badge/status-scanned-success) | Daily + On Push | $IMAGE_CRIT_BADGE | $IMAGE_HIGH_BADGE | $IMAGE_MED_BADGE | $IMAGE_LOW_BADGE |" README.md

          # Update per-image table with clickable badges (using dynamic versions)
          sed -i "/^| \*\*Synapse\*\* |/c\| **Synapse** | ${SYNAPSE_VERSION} | [![Critical](https://img.shields.io/badge/critical-${SYNAPSE_CRIT}-$([ ${SYNAPSE_CRIT} -eq 0 ] && echo 'success' || echo 'critical'))](https://github.com/${REPO}/actions/runs/${RUN_ID}) | [![High](https://img.shields.io/badge/high-${SYNAPSE_HIGH}-$([ ${SYNAPSE_HIGH} -eq 0 ] && echo 'success' || echo 'important'))](https://github.com/${REPO}/actions/runs/${RUN_ID}) | [![Medium](https://img.shields.io/badge/medium-${SYNAPSE_MED}-$([ ${SYNAPSE_MED} -eq 0 ] && echo 'success' || echo 'orange'))](https://github.com/${REPO}/actions/runs/${RUN_ID}) | [![Low](https://img.shields.io/badge/low-${SYNAPSE_LOW}-informational)](https://github.com/${REPO}/actions/runs/${RUN_ID}) |" README.md

          sed -i "/^| \*\*Element Web\*\* |/c\| **Element Web** | ${ELEMENT_VERSION} | [![Critical](https://img.shields.io/badge/critical-${ELEMENT_CRIT}-$([ ${ELEMENT_CRIT} -eq 0 ] && echo 'success' || echo 'critical'))](https://github.com/${REPO}/actions/runs/${RUN_ID}) | [![High](https://img.shields.io/badge/high-${ELEMENT_HIGH}-$([ ${ELEMENT_HIGH} -eq 0 ] && echo 'success' || echo 'important'))](https://github.com/${REPO}/actions/runs/${RUN_ID}) | [![Medium](https://img.shields.io/badge/medium-${ELEMENT_MED}-$([ ${ELEMENT_MED} -eq 0 ] && echo 'success' || echo 'orange'))](https://github.com/${REPO}/actions/runs/${RUN_ID}) | [![Low](https://img.shields.io/badge/low-${ELEMENT_LOW}-informational)](https://github.com/${REPO}/actions/runs/${RUN_ID}) |" README.md

          sed -i "/^| \*\*PostgreSQL\*\* |/c\| **PostgreSQL** | ${POSTGRES_VERSION} | [![Critical](https://img.shields.io/badge/critical-${POSTGRES_CRIT}-$([ ${POSTGRES_CRIT} -eq 0 ] && echo 'success' || echo 'critical'))](https://github.com/${REPO}/actions/runs/${RUN_ID}) | [![High](https://img.shields.io/badge/high-${POSTGRES_HIGH}-$([ ${POSTGRES_HIGH} -eq 0 ] && echo 'success' || echo 'important'))](https://github.com/${REPO}/actions/runs/${RUN_ID}) | [![Medium](https://img.shields.io/badge/medium-${POSTGRES_MED}-$([ ${POSTGRES_MED} -eq 0 ] && echo 'success' || echo 'orange'))](https://github.com/${REPO}/actions/runs/${RUN_ID}) | [![Low](https://img.shields.io/badge/low-${POSTGRES_LOW}-informational)](https://github.com/${REPO}/actions/runs/${RUN_ID}) |" README.md

          sed -i "/^| \*\*Coturn\*\* |/c\| **Coturn** | ${COTURN_VERSION} | [![Critical](https://img.shields.io/badge/critical-${COTURN_CRIT}-$([ ${COTURN_CRIT} -eq 0 ] && echo 'success' || echo 'critical'))](https://github.com/${REPO}/actions/runs/${RUN_ID}) | [![High](https://img.shields.io/badge/high-${COTURN_HIGH}-$([ ${COTURN_HIGH} -eq 0 ] && echo 'success' || echo 'important'))](https://github.com/${REPO}/actions/runs/${RUN_ID}) | [![Medium](https://img.shields.io/badge/medium-${COTURN_MED}-$([ ${COTURN_MED} -eq 0 ] && echo 'success' || echo 'orange'))](https://github.com/${REPO}/actions/runs/${RUN_ID}) | [![Low](https://img.shields.io/badge/low-${COTURN_LOW}-informational)](https://github.com/${REPO}/actions/runs/${RUN_ID}) |" README.md

          # Show diff
          echo "README changes:"
          diff README.md.backup README.md || true

      - name: Commit updated README
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          if git diff --quiet README.md; then
            echo "No changes to README"
          else
            git add README.md
            git commit -m "$(cat <<'EOF'
          chore: update security scan results in README [skip ci]

          Auto-updated vulnerability counts from Trivy scan:
          - Configuration: ${{ steps.badge.outputs.config_critical }}C/${{ steps.badge.outputs.config_high }}H/${{ steps.badge.outputs.config_medium }}M
          - Images: ${{ steps.badge.outputs.image_critical }}C/${{ steps.badge.outputs.image_high }}H/${{ steps.badge.outputs.image_medium }}M

          🤖 Generated by GitHub Actions
          EOF
          )"
            # Pull with rebase to handle concurrent commits, then push
            git pull --rebase origin main
            git push
          fi
